{"version":3,"sources":["images/unsplash.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","answer","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34900deb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/unsplash.1755a476.jpg\";","import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n    amount: number,\n    difficulty: Difficulty\n) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => ({\n        ...question,\n        answers: shuffleArray([\n            ...question.incorrect_answers,\n            question.correct_answer,\n        ]),\n    }));\n};\n","export const shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5);\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1.2rem;\n    }\n`;\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 1rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n            correct\n                ? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\n                : !correct && userClicked\n                ? \"linear-gradient(90deg, #ff5656, #c16868)\"\n                : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n`;\n","import React from \"react\";\n//Types\nimport { AnswerObject } from \"../App\";\n//Styles\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n    question: string;\n    answer: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answer,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions,\n}) => (\n    <Wrapper>\n        <p className=\"nnumber\">\n            Question: {questionNr} / {totalQuestions}\n        </p>\n        <p\n            className=\"question\"\n            dangerouslySetInnerHTML={{ __html: question }}\n        />\n        <div>\n            {answer.map((answer) => (\n                <ButtonWrapper\n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}\n                >\n                    <button\n                        disabled={userAnswer ? true : false}\n                        value={answer}\n                        onClick={callback}\n                    >\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n);\n\nexport default QuestionCard;\n","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./images/unsplash.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #000;\n        font-size: 2rem;\n        margin: 0;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n    }\n\n    h1 {\n        font-family: Fascinate Inline, Haettenschweiler, \"Arial Narrow Bold\",\n            sans-serif;\n        background-image: linear-gradient(180deg, #fff, #87f1ee);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-weight: 700;\n        font-size: 56px;\n        text-align: center;\n    }\n\n    .start,\n    .next {\n        cursor: pointer;\n        background-image: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n`;\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n//Components\nimport QuestionCard from \"./components/QuestionCard\";\n//Types\nimport { QuestionState, Difficulty } from \"./API\";\n//styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n    const [loading, setLoading] = useState(false);\n    const [questions, setQuestions] = useState<QuestionState[]>([]);\n    const [number, setNumber] = useState(0);\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n    const [score, setScore] = useState(0);\n    const [gameOver, setGameOver] = useState(true);\n\n    const startTrivia = async () => {\n        setLoading(true);\n        setGameOver(false);\n\n        const newQuestions = await fetchQuizQuestions(\n            TOTAL_QUESTIONS,\n            Difficulty.EASY\n        );\n\n        setQuestions(newQuestions);\n        setScore(0);\n        setUserAnswers([]);\n        setNumber(0);\n        setLoading(false);\n    };\n\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            //User Answer\n            const answer = e.currentTarget.value;\n            //Check answer against correct answer\n            const correct = questions[number].correct_answer === answer;\n            //Add score if answer is correct\n            if (correct) setScore((prev) => prev + 1);\n            //Save answer in the array for userAnswers\n            const AnswerObject = {\n                question: questions[number].question,\n                correct,\n                answer,\n                correctAnswer: questions[number].correct_answer,\n            };\n            setUserAnswers((prev) => [...prev, AnswerObject]);\n        }\n    };\n\n    const nextQuestion = () => {\n        //move on tot the next question if not the last question\n        const nextQuestion = number + 1;\n\n        if (nextQuestion === TOTAL_QUESTIONS) {\n            setGameOver(true);\n        } else {\n            setNumber(nextQuestion);\n        }\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <Wrapper>\n                <h1>React TS Quiz</h1>\n                {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n                    <button className=\"start\" onClick={startTrivia}>\n                        Start\n                    </button>\n                ) : null}\n                {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n                {loading && <p>Loading Questions ... </p>}\n                {!loading && !gameOver && (\n                    <QuestionCard\n                        questionNr={number + 1}\n                        totalQuestions={TOTAL_QUESTIONS}\n                        question={questions[number].question}\n                        answer={questions[number].answers}\n                        userAnswer={\n                            userAnswers ? userAnswers[number] : undefined\n                        }\n                        callback={checkAnswer}\n                    />\n                )}\n                {!loading &&\n                !gameOver &&\n                userAnswers.length === number + 1 &&\n                number !== TOTAL_QUESTIONS - 1 ? (\n                    <button className=\"next\" onClick={nextQuestion}>\n                        Next Question\n                    </button>\n                ) : null}\n            </Wrapper>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}